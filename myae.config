#!/bin/sh

declare -A CPENV
REDIS_PORT=5168

function param_set1() {
    local -n var_name=$1
    local tmp=`echo $1`

    tmp="p${tmp#*_}"
    tmp=$(redis-cli -p $REDIS_PORT hget "myae-params" $tmp)

    if [[ "$tmp" == "false" ]]; then
        var_name=false
    fi
}

function is_number() {
    local input="$1"
    if [[ "$input" =~ ^[0-9]+$ ]] && (( input == input )); then
        return 0
    else
        return 1
    fi
}

function param_set2() {
    local tmp=`echo $1`
    local tmp="p${tmp#*_}"

    tmp=$(redis-cli -p $REDIS_PORT hget "myae-params" $tmp)

    if is_number "$tmp"; then
        echo "true@$tmp"
    else
        echo "false@0"
    fi
}

function param_set3() {
    local -n var_name=$1
    local tmp0=$2

    local tmp1=`echo "$tmp0" | awk -F'@' '{print $1}'`
    local tmp2=`echo "$tmp0" | awk -F'@' '{print $2}'`
    if [[ "$tmp1" == "true" ]]; then
        var_name=$((tmp2))
    fi
}

function param_get_simuParam() {
    echo $(param_get_impl "pASLR")
}

function param_get_simuStdio() {
    echo $(param_get_impl "simuStdio")
}

function param_get_simuLostfile() {
    echo $(param_get_impl "simuLostfile")
}

function param_get_impl() {
    tmp=$(redis-cli -p $REDIS_PORT hget "myae-params" $1)
    echo $((tmp))
}

FIRMAE_BOOT=true
FIRMAE_NET=true
FIRMAE_NVRAM=true
FIRMAE_KERNEL=true
FIRMAE_ETC=true

if (${FIRMAE_ETC}); then
    TIMEOUT=240
    CHECK_TIMEOUT=360
else
    TIMEOUT=60
    CHECK_TIMEOUT=60
fi
MYAE_ASLR=1
SIMU_LOSTFILE=1
SIMU_STDIO=1

function base_params_init() {
    param_set1 FIRMAE_BOOT
    param_set1 FIRMAE_NET
    param_set1 FIRMAE_NVRAM
    param_set1 FIRMAE_KERNEL
    param_set1 FIRMAE_ETC

    if (${FIRMAE_ETC}); then
        tmp0=$(param_set2 TM1)
        param_set3 TIMEOUT $tmp0

        tmp0=$(param_set2 CTM1)
        param_set3 CHECK_TIMEOUT $tmp0
    else
        tmp0=$(param_set2 TM2)
        param_set3 TIMEOUT $tmp0

        tmp0=$(param_set2 CTM2)
        param_set3 CHECK_TIMEOUT $tmp0
    fi

    tmp0=$(param_set2 MYAE_ASLR)
    ASLR=0
    param_set3 ASLR $tmp0
    if [ $ASLR -eq 0 ] || [ $ASLR -eq 2 ]; then
        MYAE_ASLR=$ASLR
    fi

    if (${FIRMAE_ETC}); then
        pTM="pTM1"
        pCTM="pCTM1"
    else
        pTM="pTM2"
        pCTM="pCTM2"
    fi

    SIMU_LOSTFILE=$(param_get_simuLostfile)
    SIMU_STDIO=$(param_get_simuStdio)

    redis-cli -p $REDIS_PORT hset "myae-params" \
        pBOOT "$FIRMAE_BOOT" pNET "$FIRMAE_NET" \
        pNVRAM "$FIRMAE_NVRAM" pKERNEL "$FIRMAE_KERNEL" \
        pETC "$FIRMAE_ETC" pASLR "$MYAE_ASLR" \
        $pTM "$TIMEOUT" $pCTM "$CHECK_TIMEOUT" \
        simuLostfile $SIMU_LOSTFILE simuStdio $SIMU_STDIO > /dev/null
}

if [ -n "${FIRMAE_DOCKER-}" ]; then
    FIRMAE_DIR=/work/FirmAE
    PSQL_IP=172.17.0.1
else
    FIRMAE_DIR=$(pwd)
    PSQL_IP=127.0.0.1
fi

BINARIES=( "busybox" "console" "gdb" "gdbserver" "strace" "libnvram.so" "libnvram_ioctl.so" )
PAPI_SERV="localhost:5368"
MYAEP1PREFIX=/home/andy/myae
MYAEP2PREFIX=/opt/myae

add_cpenv () {
    if [ $# -eq 2 ]; then
        CPENV[$1]=$2
    else
        CPENV[$1]="NV"
    fi
}

print_cpenv () {
    echo
    for kv in ${!CPENV[@]}; do
        local tmp0=${kv};
        local tmp1="$(eval echo \${!tmp0})"
        tmp1=${tmp1#*opt/}
        tmp0=${tmp0/FIRMAE/MYAE}
        printf "%s => %s\n" "环境变量【$tmp0】" "$tmp1";
    done
    echo
}

# specify full paths to other directories
BINARY_DIR=${FIRMAE_DIR}/binaries/
TARBALL_DIR=${FIRMAE_DIR}/images/
SCRATCH_DIR=${FIRMAE_DIR}/scratch
SCRIPT_DIR=${FIRMAE_DIR}/scripts/

# functions to safely compute other paths
check_arch () {
    ARCHS=("armel" "mipseb" "mipsel")

    if [ -z "${1}" ]; then
        return 0
    fi

    match=0
    for i in "${ARCHS[@]}"; do
        if [ "${1}" == "$i" ]; then
            match=1
        fi
    done

    if [ "${match}" -eq 0 ]; then
        return 0
    fi

    return 1
}

check_number () {
    if [ "${1}" -ge 0 ]; then
        return 1
    fi

    return 0
}

check_root () {
    if [ "${EUID}" -eq 0 ]; then
        return 1
    fi

    return 0
}

get_fs () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "`get_scratch "${1}"`/image.raw"
}

get_fs_mount () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "`get_scratch "${1}"`/image/"
}

get_kernel () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "${BINARY_DIR}/zImage.${1}"
            ;;
        mipseb)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        mipsel)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_boot_kernel () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "${BINARY_DIR}/vmlinux.${1}"
            ;;
        mipseb)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        mipsel)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_binary () {
    if check_arch "${2}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    echo "${BINARY_DIR}/${1}.${2}"
}

get_qemu () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "qemu-system-arm"
            ;;
        mipseb)
            echo "qemu-system-mips"
            ;;
        mipsel)
            echo "qemu-system-mipsel"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_qemu_ver () {
    local tmp=$1
    tmp=`$tmp --version`
    tmp=${tmp%%Copyright*}
    printf "当前QEMU版本=> %s\n" "$tmp"
}

get_qemu_disk () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "/dev/vda1"
            ;;
        mipseb)
            echo "/dev/sda1"
            ;;
        mipsel)
            echo "/dev/sda1"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_qemu_machine () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "virt"
            ;;
        mipseb)
            echo "malta"
            ;;
        mipsel)
            echo "malta"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_scratch () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "${SCRATCH_DIR}/${IID}"
}

wait_sometime() {
    local tmp=`expr $[RANDOM %7] + 1`
    local isprint=1

    if [ $# -eq 2 ]; then
        tmp=${1};
        if [ "$2" = "false" ]; then
            isprint=0
        fi
    fi
    if [ $# -eq 1 ]; then
        tmp=${1};
    fi

    if [ $isprint -eq 0 ]; then
        sleep $tmp
    else
        for i in $(seq 1 ${tmp}); do
            sleep 1
            sec=`echo $(expr ${tmp} - $i)`
            echo "倒计时：$sec秒"
        done
    fi
}

get_brand_fromweb() {
    resp=$(curl "Content-Type: application/json" -X POST -s -d "firm_name=$1" "http://$PAPI_SERV/myae/api/v1/yishi/firmwares/qbrand/")
    echo ${resp} | jq '.data'
}

reg_engine_toweb() {
    resp=$(curl "Content-Type: application/json" -X POST -s -d "processid=$1" "http://$PAPI_SERV/myae/api/v1/yishi/register/")
    echo ${resp}
}

watch_job() {
    local job_name=${1};

    while true; do
        is_job_running=`jobs -r | grep "$job_name"`

        if [ -z "$is_job_running" ]; then
            break
        else
            echo -n "."
            sleep 1
        fi
    done
    echo
}

check_network () {
    IPS=("${@}")
    DEBUG_MODE=${IPS[-2]}
    LOG_MODE=${IPS[-1]}
    unset IPS[-1]
    unset IPS[-1]

    wait_sometime 10 $LOG_MODE

    PING_RESULT=false
    PING_TIME=-1
    WEB_RESULT=false
    WEB_TIME=-1
    RET_IP="None"

    if [ "$LOG_MODE" = "true" ]; then
        echo "检测服务连通性开始..."
    fi

    START_TIME=$(date +%s | bc)
    CURRENT_TIME=$(date +%s | bc)
    t_start=$(date +%s.%3N)
    while [ ${CURRENT_TIME} -le $[${START_TIME} + ${CHECK_TIMEOUT}] ]; do
        for IP in "${IPS[@]}"; do
            if (curl -s --max-time 2 --output "${SCRATCH_DIR}/${IID}/cur-http.log" --include http://${IP} || 
                curl -s --max-time 2 --output "${SCRATCH_DIR}/${IID}/cur-https.log" --include https://${IP}); then
                t_end=$(date +%s.%3N)
                if (! ${WEB_RESULT}); then
                    WEB_TIME=$(echo "$t_end - $t_start" | bc)
                fi
                if (! ${PING_RESULT}); then
                    PING_TIME=${WEB_TIME}
                fi
                PING_RESULT=true
                WEB_RESULT=true
                RET_IP=${IP}
            fi
            if (ping -c 1 ${IP} > /dev/null); then
                t_end=$(date +%s.%3N)
                if (! ${PING_RESULT}); then
                    PING_TIME=$(echo "$t_end - $t_start" | bc)
                fi
                PING_RESULT=true
                RET_IP=${IP}
            fi

            if (${WEB_RESULT}); then
                break
            fi
            sleep 1
            CURRENT_TIME=$(date +%s | bc)
        done

        if (${WEB_RESULT}); then
            break
        fi
    done

    echo "${RET_IP}" "${PING_RESULT}" "${WEB_RESULT}" "${PING_TIME}" "${WEB_TIME}"

    if [ "$LOG_MODE" = "true" ]; then
        if [[ "$ARCH" =~ ^arm ]]; then
            if [ ${OPTION} = "run" ]; then
                curts=`date +'%Y-%m-%d %H:%M:%S'`
                echo -e "arm firmware calibrating ts: $curts"
                (sleep 1; echo "date -s '$curts'"; \
                 sleep 1; echo "/firmadyne/watch_arm_core.sh 2>&1 >/opt/watch_arm_core.out &"; \
                 sleep 1; echo "exit"; \
                ) | telnet ${RET_IP} 31338 > /dev/null
            fi
        fi
    fi
}

get_device () {
    echo '/dev/mapper/'`ls -t /dev/mapper | head -1`
}

add_partition () {
    local IFS=$'\n'
    local IMAGE_PATH
    local DEV_PATH=""
    local FOUND=false

    losetup -Pf ${1}
    while (! ${FOUND}); do
        sleep 1
        for LINE in `losetup`; do
            IMAGE_PATH=`echo ${LINE} | awk '{print $6}'`
            if [ "${IMAGE_PATH}" = "${1}" ]; then
                DEV_PATH=`echo ${LINE} | awk '{print $1}'`p1
                if [ -e ${DEV_PATH} ]; then
                    FOUND=true
                fi
            fi
        done
    done

    while (! ls -al ${DEV_PATH} | grep -q "disk"); do
        sleep 1
    done
    echo ${DEV_PATH}
}

del_partition () {
    losetup -d ${1} &> /dev/null || true
    dmsetup remove $(basename ${1}) &>/dev/null || true
    sleep 1
}
